public class DivideConquer {

    public static void main(String[] args) {
        int[] array = {38, 27, 43, 3, 9, 82, 10}; // sample array to be sorted
        System.out.println("Original array:");
        printArray(array); // prints the original array

       
        MergeSort(array, 0, array.length - 1);

        System.out.println("Sorted array:");
        printArray(array); // prints the sorted array
    }

    static void MergeSort(int[] array, int left, int right) {
        if (left < right) {
           a
            int mid = left + (right - left) / 2; // added "left +" to calculate the mid point of the array. and changed the "left - right" to "right to left" to prevent stack overflow
            
            // Divide step
            MergeSort(array, left, mid);
            MergeSort(array, mid + 1, right);
            
            Merge(array, left, mid, right);
        }
    }

    static void Merge(int[] array, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;    
        
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];
        
       
        for (int i = 0; i < n1; i++) {
            leftArray[i] = array[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArray[j] = array[mid + 1 + j];
        }
        
        // merge the temp arrays back into the original
        int iIndex = 0, jIndex = 0, kIndex = left;
        
        while (iIndex < n1 && jIndex < n2) {
            if (leftArray[iIndex] <= rightArray[jIndex]) {
                array[kIndex++] = leftArray[iIndex++];
            } else {
                array[kIndex++] = rightArray[jIndex++];
            }
        }
        
        // while loop to copy the remaining elements if there's any in the left array
        while (iIndex < n1) {
            array[kIndex++] = leftArray[iIndex++];
        }
        
        // loop to copy the remaining elements if there's any in the right array
        while (jIndex < n2) {
            array[kIndex++] = rightArray[jIndex++]; // Corrected index
        }
    }
    
    // for each output for the array
    static void printArray(int[] array) {
        for (int value : array) {
            System.out.print(value + " "); // prints each element in the array
        }
        System.out.println(); // for cleaner output
    }
}
