public class Calculator extends JFrame implements ActionListener {

    private JTextField display;
    private JButton[] numberButtons = new JButton[10];
    private JButton addButton, subButton, mulButton, divButton, equButton, clrButton;
    private JPanel panel;


    private double num1, num2, result;
    private char operator;

    public Calculator() {

        setTitle("Calculator");
        setSize(300, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);
        setResizable(false);

    
        display = new JTextField("0");
        display.setBounds(10, 20, 260, 50);
        display.setEditable(false);
        display.setHorizontalAlignment(SwingConstants.RIGHT);
        display.setFont(new Font("Arial", Font.PLAIN, 24));
        add(display);


        for (int i = 0; i < 10; i++) {
            numberButtons[i] = new JButton(String.valueOf(i));
            numberButtons[i].addActionListener(this);
            numberButtons[i].setFont(new Font("Arial", Font.BOLD, 20));
        }

        addButton = new JButton("+");
        subButton = new JButton("-");
        mulButton = new JButton("x");
        divButton = new JButton("/");
        equButton = new JButton("=");
        clrButton = new JButton("C");

        JButton[] funcButtons = {addButton, subButton, mulButton, divButton, equButton, clrButton};
        for (JButton button : funcButtons) {
            button.addActionListener(this);
            button.setFont(new Font("Arial", Font.BOLD, 20));
            button.setForeground(Color.WHITE);
            button.setBackground(Color.BLACK);
        }
        clrButton.setBackground(Color.RED);

  
        panel = new JPanel();
        panel.setLayout(new GridLayout(4, 4, 10, 10));
        panel.setBounds(10, 100, 260, 240);


        panel.add(numberButtons[7]);
        panel.add(numberButtons[8]);
        panel.add(numberButtons[9]);
        panel.add(addButton);

        panel.add(numberButtons[4]);
        panel.add(numberButtons[5]);
        panel.add(numberButtons[6]);
        panel.add(subButton);

        panel.add(numberButtons[1]);
        panel.add(numberButtons[2]);
        panel.add(numberButtons[3]);
        panel.add(mulButton);

        panel.add(clrButton);
        panel.add(numberButtons[0]);
        panel.add(equButton);
        panel.add(divButton);

        add(panel);
        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        for (int i = 0; i < 10; i++) {
            if (e.getSource() == numberButtons[i]) {
                String currentText = display.getText();
                display.setText(currentText.equals("0") ? String.valueOf(i) : currentText + i);
            }
        }

        if (e.getSource() == clrButton) {
            display.setText("0");
            num1 = num2 = result = 0;
        }

        if (e.getSource() == addButton || e.getSource() == subButton || e.getSource() == mulButton || e.getSource() == divButton) {
            num1 = Double.parseDouble(display.getText());
            display.setText("0");
            operator = ((JButton) e.getSource()).getText().charAt(0);
        }

        if (e.getSource() == equButton) {
            num2 = Double.parseDouble(display.getText());
            switch (operator) {
                case '+' -> result = num1 + num2;
                case '-' -> result = num1 - num2;
                case 'x' -> result = num1 * num2;
                case '/' -> result = num1 / num2;
            }
            display.setText(formatResult(result));
            num1 = result;
        }
    }

   
    private String formatResult(double value) {
        if (value == (int) value) {
            return String.valueOf((int) value); 
        } else {
            return String.valueOf(value);
        }
    }
  }
}
